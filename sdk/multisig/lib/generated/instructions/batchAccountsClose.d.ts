/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category BatchAccountsClose
 * @category generated
 */
export declare const batchAccountsCloseStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _batchAccountsClose_ instruction
 *
 * @property [] multisig
 * @property [_writable_] proposal
 * @property [_writable_] batch
 * @property [_writable_] rentCollector
 * @category Instructions
 * @category BatchAccountsClose
 * @category generated
 */
export type BatchAccountsCloseInstructionAccounts = {
    multisig: web3.PublicKey;
    proposal: web3.PublicKey;
    batch: web3.PublicKey;
    rentCollector: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const batchAccountsCloseInstructionDiscriminator: number[];
/**
 * Creates a _BatchAccountsClose_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category BatchAccountsClose
 * @category generated
 */
export declare function createBatchAccountsCloseInstruction(accounts: BatchAccountsCloseInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=batchAccountsClose.d.ts.map