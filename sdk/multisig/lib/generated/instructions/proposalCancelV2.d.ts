/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { ProposalVoteArgs } from '../types/ProposalVoteArgs';
/**
 * @category Instructions
 * @category ProposalCancelV2
 * @category generated
 */
export type ProposalCancelV2InstructionArgs = {
    args: ProposalVoteArgs;
};
/**
 * @category Instructions
 * @category ProposalCancelV2
 * @category generated
 */
export declare const proposalCancelV2Struct: beet.FixableBeetArgsStruct<ProposalCancelV2InstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _proposalCancelV2_ instruction
 *
 * @property [] proposalVoteItemMultisig
 * @property [_writable_, **signer**] proposalVoteItemMember
 * @property [_writable_] proposalVoteItemProposal
 * @category Instructions
 * @category ProposalCancelV2
 * @category generated
 */
export type ProposalCancelV2InstructionAccounts = {
    proposalVoteItemMultisig: web3.PublicKey;
    proposalVoteItemMember: web3.PublicKey;
    proposalVoteItemProposal: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const proposalCancelV2InstructionDiscriminator: number[];
/**
 * Creates a _ProposalCancelV2_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProposalCancelV2
 * @category generated
 */
export declare function createProposalCancelV2Instruction(accounts: ProposalCancelV2InstructionAccounts, args: ProposalCancelV2InstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=proposalCancelV2.d.ts.map