/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { ProgramConfigInitArgs } from '../types/ProgramConfigInitArgs';
/**
 * @category Instructions
 * @category ProgramConfigInit
 * @category generated
 */
export type ProgramConfigInitInstructionArgs = {
    args: ProgramConfigInitArgs;
};
/**
 * @category Instructions
 * @category ProgramConfigInit
 * @category generated
 */
export declare const programConfigInitStruct: beet.BeetArgsStruct<ProgramConfigInitInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _programConfigInit_ instruction
 *
 * @property [_writable_] programConfig
 * @property [_writable_, **signer**] initializer
 * @category Instructions
 * @category ProgramConfigInit
 * @category generated
 */
export type ProgramConfigInitInstructionAccounts = {
    programConfig: web3.PublicKey;
    initializer: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const programConfigInitInstructionDiscriminator: number[];
/**
 * Creates a _ProgramConfigInit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProgramConfigInit
 * @category generated
 */
export declare function createProgramConfigInitInstruction(accounts: ProgramConfigInitInstructionAccounts, args: ProgramConfigInitInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=programConfigInit.d.ts.map