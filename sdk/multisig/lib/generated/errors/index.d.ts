/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * DuplicateMember: 'Found multiple members with the same pubkey'
 *
 * @category Errors
 * @category generated
 */
export declare class DuplicateMemberError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * EmptyMembers: 'Members array is empty'
 *
 * @category Errors
 * @category generated
 */
export declare class EmptyMembersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooManyMembers: 'Too many members, can be up to 65535'
 *
 * @category Errors
 * @category generated
 */
export declare class TooManyMembersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidThreshold: 'Invalid threshold, must be between 1 and number of members with Vote permission'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidThresholdError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Unauthorized: 'Attempted to perform an unauthorized action'
 *
 * @category Errors
 * @category generated
 */
export declare class UnauthorizedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotAMember: 'Provided pubkey is not a member of multisig'
 *
 * @category Errors
 * @category generated
 */
export declare class NotAMemberError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTransactionMessage: 'TransactionMessage is malformed.'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTransactionMessageError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * StaleProposal: 'Proposal is stale'
 *
 * @category Errors
 * @category generated
 */
export declare class StaleProposalError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidProposalStatus: 'Invalid proposal status'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidProposalStatusError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTransactionIndex: 'Invalid transaction index'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTransactionIndexError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AlreadyApproved: 'Member already approved the transaction'
 *
 * @category Errors
 * @category generated
 */
export declare class AlreadyApprovedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AlreadyRejected: 'Member already rejected the transaction'
 *
 * @category Errors
 * @category generated
 */
export declare class AlreadyRejectedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AlreadyCancelled: 'Member already cancelled the transaction'
 *
 * @category Errors
 * @category generated
 */
export declare class AlreadyCancelledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidNumberOfAccounts: 'Wrong number of accounts provided'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidNumberOfAccountsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidAccount: 'Invalid account provided'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RemoveLastMember: 'Cannot remove last member'
 *
 * @category Errors
 * @category generated
 */
export declare class RemoveLastMemberError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NoVoters: 'Members don't include any voters'
 *
 * @category Errors
 * @category generated
 */
export declare class NoVotersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NoProposers: 'Members don't include any proposers'
 *
 * @category Errors
 * @category generated
 */
export declare class NoProposersError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NoExecutors: 'Members don't include any executors'
 *
 * @category Errors
 * @category generated
 */
export declare class NoExecutorsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStaleTransactionIndex: '`stale_transaction_index` must be <= `transaction_index`'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStaleTransactionIndexError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotSupportedForControlled: 'Instruction not supported for controlled multisig'
 *
 * @category Errors
 * @category generated
 */
export declare class NotSupportedForControlledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TimeLockNotReleased: 'Proposal time lock has not been released'
 *
 * @category Errors
 * @category generated
 */
export declare class TimeLockNotReleasedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NoActions: 'Config transaction must have at least one action'
 *
 * @category Errors
 * @category generated
 */
export declare class NoActionsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MissingAccount: 'Missing account'
 *
 * @category Errors
 * @category generated
 */
export declare class MissingAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidDestination: 'Invalid destination'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidDestinationError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SpendingLimitExceeded: 'Spending limit exceeded'
 *
 * @category Errors
 * @category generated
 */
export declare class SpendingLimitExceededError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DecimalsMismatch: 'Decimals don't match the mint'
 *
 * @category Errors
 * @category generated
 */
export declare class DecimalsMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * UnknownPermission: 'Member has unknown permission'
 *
 * @category Errors
 * @category generated
 */
export declare class UnknownPermissionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ProtectedAccount: 'Account is protected, it cannot be passed into a CPI as writable'
 *
 * @category Errors
 * @category generated
 */
export declare class ProtectedAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TimeLockExceedsMaxAllowed: 'Time lock exceeds the maximum allowed (90 days)'
 *
 * @category Errors
 * @category generated
 */
export declare class TimeLockExceedsMaxAllowedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IllegalAccountOwner: 'Account is not owned by Multisig program'
 *
 * @category Errors
 * @category generated
 */
export declare class IllegalAccountOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RentReclamationDisabled: 'Rent reclamation is disabled for this multisig'
 *
 * @category Errors
 * @category generated
 */
export declare class RentReclamationDisabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidRentCollector: 'Invalid rent collector address'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidRentCollectorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ProposalForAnotherMultisig: 'Proposal is for another multisig'
 *
 * @category Errors
 * @category generated
 */
export declare class ProposalForAnotherMultisigError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TransactionForAnotherMultisig: 'Transaction is for another multisig'
 *
 * @category Errors
 * @category generated
 */
export declare class TransactionForAnotherMultisigError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TransactionNotMatchingProposal: 'Transaction doesn't match proposal'
 *
 * @category Errors
 * @category generated
 */
export declare class TransactionNotMatchingProposalError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TransactionNotLastInBatch: 'Transaction is not last in batch'
 *
 * @category Errors
 * @category generated
 */
export declare class TransactionNotLastInBatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * BatchNotEmpty: 'Batch is not empty'
 *
 * @category Errors
 * @category generated
 */
export declare class BatchNotEmptyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SpendingLimitInvalidAmount: 'Invalid SpendingLimit amount'
 *
 * @category Errors
 * @category generated
 */
export declare class SpendingLimitInvalidAmountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidInstructionArgs: 'Invalid Instruction Arguments'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidInstructionArgsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * FinalBufferHashMismatch: 'Final message buffer hash doesnt match the expected hash'
 *
 * @category Errors
 * @category generated
 */
export declare class FinalBufferHashMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * FinalBufferSizeExceeded: 'Final buffer size cannot exceed 4000 bytes'
 *
 * @category Errors
 * @category generated
 */
export declare class FinalBufferSizeExceededError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * FinalBufferSizeMismatch: 'Final buffer size mismatch'
 *
 * @category Errors
 * @category generated
 */
export declare class FinalBufferSizeMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MultisigCreateDeprecated: 'multisig_create has been deprecated. Use multisig_create_v2 instead.'
 *
 * @category Errors
 * @category generated
 */
export declare class MultisigCreateDeprecatedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
//# sourceMappingURL=index.d.ts.map